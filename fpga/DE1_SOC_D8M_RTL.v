//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC_D8M_RTL(
    //////////// ADC //////////
    output		          		ADC_CONVST,
    output		          		ADC_DIN,
    input 		          		ADC_DOUT,
    output		          		ADC_SCLK,

    //////////// Audio //////////
    input 		          		AUD_ADCDAT,
    inout 		          		AUD_ADCLRCK,
    inout 		          		AUD_BCLK,
    output		          		AUD_DACDAT,
    inout 		          		AUD_DACLRCK,
    output		          		AUD_XCK,

    //////////// CLOCK //////////
    input 		          		CLOCK2_50,
    input 		          		CLOCK3_50,
    input 		          		CLOCK4_50,
    input 		          		CLOCK_50,

    //////////// SDRAM //////////
    output		    [12:0]		DRAM_ADDR,
    output		    [1:0]		DRAM_BA,
    output		          		DRAM_CAS_N,
    output		          		DRAM_CKE,
    output		          		DRAM_CLK,
    output		          		DRAM_CS_N,
    inout 		    [15:0]		DRAM_DQ,
    output		          		DRAM_LDQM,
    output		          		DRAM_RAS_N,
    output		          		DRAM_UDQM,
    output		          		DRAM_WE_N,

    //////////// I2C for Audio and Video-In //////////
    output		          		FPGA_I2C_SCLK,
    inout 		          		FPGA_I2C_SDAT,

    //////////// SEG7 //////////
    output		     [6:0]		HEX0,
    output		     [6:0]		HEX1,
    output		     [6:0]		HEX2,
    output		     [6:0]		HEX3,
    output		     [6:0]		HEX4,
    output		     [6:0]		HEX5,

    //////////// IR //////////
    input 		          		IRDA_RXD,
    output		          		IRDA_TXD,

    //////////// KEY //////////
    input 		     [3:0]		KEY,

    //////////// LED //////////
    output		     [9:0]		LEDR,

    //////////// PS2 //////////
    inout 		          		PS2_CLK,
    inout 		          		PS2_CLK2,
    inout 		          		PS2_DAT,
    inout 		          		PS2_DAT2,

    //////////// SW //////////
    input 		     [9:0]		SW,

    //////////// Video-In //////////
    input 		          		TD_CLK27,
    input 		     [7:0]		TD_DATA,
    input 		          		TD_HS,
    output		          		TD_RESET_N,
    input 		          		TD_VS,

    //////////// VGA //////////
    output		          		VGA_BLANK_N,
    output		     [7:0]		VGA_B,
    output		          		VGA_CLK,
    output		     [7:0]		VGA_G,
    output		          		VGA_HS,
    output		     [7:0]		VGA_R,
    output		          		VGA_SYNC_N,
    output		          		VGA_VS,

    //////////// GPIO_1, GPIO_1 connect to D8M-GPIO //////////
    output 		          		CAMERA_I2C_SCL,
    inout 		          		CAMERA_I2C_SDA,
    output		          		CAMERA_PWDN_n,
    output		          		MIPI_CS_n,
    inout 		          		MIPI_I2C_SCL,
    inout 		          		MIPI_I2C_SDA,
    output		          		MIPI_MCLK,
    input 		          		MIPI_PIXEL_CLK,
    input 		     [9:0]		MIPI_PIXEL_D,
    input 		          		MIPI_PIXEL_HS,
    input 		          		MIPI_PIXEL_VS,
    output		          		MIPI_REFCLK,
    output		          		MIPI_RESET_n,
    //////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
    inout 		    [35:0]		GPIO

    // ////////////////////////////////////
    // // HPS Pins
    // ////////////////////////////////////

    // // DDR3 SDRAM
    // output		[14: 0]	HPS_DDR3_ADDR,
    // output		[ 2: 0]  HPS_DDR3_BA,
    // output					HPS_DDR3_CAS_N,
    // output					HPS_DDR3_CKE,
    // output					HPS_DDR3_CK_N,
    // output					HPS_DDR3_CK_P,
    // output					HPS_DDR3_CS_N,
    // output		[ 3: 0]	HPS_DDR3_DM,
    // inout			[31: 0]	HPS_DDR3_DQ,
    // inout			[ 3: 0]	HPS_DDR3_DQS_N,
    // inout			[ 3: 0]	HPS_DDR3_DQS_P,
    // output					HPS_DDR3_ODT,
    // output					HPS_DDR3_RAS_N,
    // output					HPS_DDR3_RESET_N,
    // input						HPS_DDR3_RZQ,
    // output					HPS_DDR3_WE_N,

    // // Ethernet
    // output					HPS_ENET_GTX_CLK,
    // inout						HPS_ENET_INT_N,
    // output					HPS_ENET_MDC,
    // inout						HPS_ENET_MDIO,
    // input						HPS_ENET_RX_CLK,
    // input			[ 3: 0]	HPS_ENET_RX_DATA,
    // input						HPS_ENET_RX_DV,
    // output		[ 3: 0]	HPS_ENET_TX_DATA,
    // output					HPS_ENET_TX_EN,

    // // Flash
    // inout			[ 3: 0]	HPS_FLASH_DATA,
    // output					HPS_FLASH_DCLK,
    // output					HPS_FLASH_NCSO,

    // // Accelerometer
    // inout						HPS_GSENSOR_INT,

    // // General Purpose I/O
    // inout			[ 1: 0]	HPS_GPIO,

    // // I2C
    // inout						HPS_I2C_CONTROL,
    // inout						HPS_I2C1_SCLK,
    // inout						HPS_I2C1_SDAT,
    // inout						HPS_I2C2_SCLK,
    // inout						HPS_I2C2_SDAT,

    // // Pushbutton
    // inout						HPS_KEY,

    // // LED
    // inout						HPS_LED,

    // // SD Card
    // output					HPS_SD_CLK,
    // inout						HPS_SD_CMD,
    // inout			[ 3: 0]	HPS_SD_DATA,

    // // SPI
    // output					HPS_SPIM_CLK,
    // input						HPS_SPIM_MISO,
    // output					HPS_SPIM_MOSI,
    // inout						HPS_SPIM_SS,

    // // UART
    // input						HPS_UART_RX,
    // output					HPS_UART_TX,

    // // USB
    // inout						HPS_CONV_USB_N,
    // input						HPS_USB_CLKOUT,
    // inout			[ 7: 0]	HPS_USB_DATA,
    // input						HPS_USB_DIR,
    // input						HPS_USB_NXT,
    // output					HPS_USB_STP
);


    //=============================================================================
    // REG/WIRE declarations
    //=============================================================================

    wire [15:0] SDRAM_RD_DATA;
    wire		DLY_RST_0;
    wire		DLY_RST_1;
    wire		DLY_RST_2;

    wire		SDRAM_CTRL_CLK;
    wire        D8M_CK_HZ;
    wire        D8M_CK_HZ2;
    wire        D8M_CK_HZ3;

    wire [7:0]  RED;
    wire [7:0]  GREEN;
    wire [7:0]  BLUE;
    wire [12:0] VGA_H_CNT;
    wire [12:0] VGA_V_CNT;

    wire        READ_Request;
    wire [7:0]  B_AUTO;
    wire [7:0]  G_AUTO;
    wire [7:0]  R_AUTO;
    wire        RESET_N;

    wire        I2C_RELEASE;
    wire        AUTO_FOC;
    wire        CAMERA_I2C_SCL_MIPI;
    wire        CAMERA_I2C_SCL_AF;
    wire        CAMERA_MIPI_RELAESE;
    wire        MIPI_BRIDGE_RELEASE;

    wire        LUT_MIPI_PIXEL_HS;
    wire        LUT_MIPI_PIXEL_VS;
    wire [9:0]  LUT_MIPI_PIXEL_D;
    wire        MIPI_PIXEL_CLK_;
    wire [9:0]  PCK;

    reg [7:0]  BOUND_RED, BOUND_GREEN, BOUND_BLUE;
    wire [10:0] X, Y;
    wire [31:0] Y_CHANNEL, BOUND_Y_CHANNEL;


    //=======================================================
    // Structural coding
    //=======================================================

    //--INPU MIPI-PIXEL-CLOCK DELAY
    CLOCK_DELAY  del1(  .iCLK (MIPI_PIXEL_CLK),  .oCLK (MIPI_PIXEL_CLK_ ) );

    assign LUT_MIPI_PIXEL_HS=MIPI_PIXEL_HS;
    assign LUT_MIPI_PIXEL_VS=MIPI_PIXEL_VS;
    assign LUT_MIPI_PIXEL_D =MIPI_PIXEL_D ;

    //------UART OFF --
    assign UART_RTS =0;
    assign UART_TXD =0;
    //------HEX OFF --
    // assign HEX2           = 7'h7F;
    // assign HEX3           = 7'h7F;
    // assign HEX4           = 7'h7F;
    // assign HEX5           = 7'h7F;

    //------ MIPI BRIGE & CAMERA RESET  --
    assign CAMERA_PWDN_n  = 1;
    assign MIPI_CS_n      = 0;
    assign MIPI_RESET_n   = RESET_N;

    //------ CAMERA MODULE I2C SWITCH  --
    assign I2C_RELEASE    = CAMERA_MIPI_RELAESE & MIPI_BRIDGE_RELEASE;
    assign CAMERA_I2C_SCL = ( I2C_RELEASE ) ? CAMERA_I2C_SCL_AF : CAMERA_I2C_SCL_MIPI;

    //----- RESET RELAY  --
    RESET_DELAY		u2	(
        .iRST  ( KEY[0] ),
        .iCLK  ( CLOCK2_50 ),
        .oRST_0( DLY_RST_0 ),
        .oRST_1( DLY_RST_1 ),
        .oRST_2( DLY_RST_2 ),
        .oREADY( RESET_N)
    );

    //------ MIPI BRIGE & CAMERA SETTING  --
    MIPI_BRIDGE_CAMERA_Config    cfin(
        .RESET_N           ( RESET_N ),
        .CLK_50            ( CLOCK2_50 ),
        .MIPI_I2C_SCL      ( MIPI_I2C_SCL ),
        .MIPI_I2C_SDA      ( MIPI_I2C_SDA ),
        .MIPI_I2C_RELEASE  ( MIPI_BRIDGE_RELEASE ),
        .CAMERA_I2C_SCL    ( CAMERA_I2C_SCL_MIPI ),
        .CAMERA_I2C_SDA    ( CAMERA_I2C_SDA ),
        .CAMERA_I2C_RELAESE( CAMERA_MIPI_RELAESE )
    );

    //------MIPI / VGA REF CLOCK  --
    pll_test pll_ref(
        .inclk0 ( CLOCK3_50 ),
        .areset ( ~KEY[0]   ),
        .c0( MIPI_REFCLK    ) //20Mhz
    );

    //------MIPI / VGA REF CLOCK  -
    VIDEO_PLL pll_ref1(
        .inclk0 ( CLOCK2_50 ),
        .areset ( ~KEY[0] ),
        .c0( VGA_CLK )        //25 Mhz
    );

    //------SDRAM CLOCK GENNERATER  --
    sdram_pll u6(
        .areset( 0 ),
        .inclk0( CLOCK_50 ),
        .c1    ( DRAM_CLK ),       //100MHZ   -90 degree
        .c0    ( SDRAM_CTRL_CLK )  //100MHZ     0 degree
    );

    //------SDRAM CONTROLLER --
    Sdram_Control	u7	(
        //	HOST Side
        .RESET_N     ( KEY[0] ),
        .CLK         ( SDRAM_CTRL_CLK ),

        //	FIFO Write Side 1
        .WR1_DATA    ( LUT_MIPI_PIXEL_D[9:0] ),
        .WR1         ( LUT_MIPI_PIXEL_HS & LUT_MIPI_PIXEL_VS ),
        .WR1_ADDR    ( 0 ),
        .WR1_MAX_ADDR( 640*480 ),
        .WR1_LENGTH  ( 256 ),
        .WR1_LOAD    ( !DLY_RST_0 ),
        .WR1_CLK     ( MIPI_PIXEL_CLK_ ),

        //	FIFO Read Side 1
        .RD1_DATA    ( SDRAM_RD_DATA[9:0] ),
        .RD1         ( READ_Request ),
        .RD1_ADDR    ( 0 ),
        .RD1_MAX_ADDR( 640*480 ),
        .RD1_LENGTH  ( 256  ),
        .RD1_LOAD    ( !DLY_RST_1 ),
        .RD1_CLK     ( VGA_CLK ),

        //	SDRAM Side
        .SA          ( DRAM_ADDR ),
        .BA          ( DRAM_BA ),
        .CS_N        ( DRAM_CS_N ),
        .CKE         ( DRAM_CKE ),
        .RAS_N       ( DRAM_RAS_N ),
        .CAS_N       ( DRAM_CAS_N ),
        .WE_N        ( DRAM_WE_N ),
        .DQ          ( DRAM_DQ ),
        .DQM         ( DRAM_DQM  )
    );

    //------ CMOS CCD_DATA TO RGB_DATA --

    RAW2RGB_J	u4	(
        .RST          ( VGA_VS ),
        .iDATA        ( SDRAM_RD_DATA[9:0] ),

        //-----------------------------------
        .VGA_CLK      ( VGA_CLK ),
        .READ_Request ( READ_Request ),
        .VGA_VS       ( VGA_VS ),
        .VGA_HS       ( VGA_HS ),

        .oRed         ( RED  ),
        .oGreen       ( GREEN),
        .oBlue        ( BLUE ),

        .mX_Cont      ( X ),
        .mY_Cont      ( Y )
    );

    //------RGB to YCbCr conversion (we only need Y) --
    // 32-bit fixed point number: top 24 bits is the integer part, bottom 8 bits is the fractional part
    assign Y_CHANNEL = (16+(((RED<<6) + (RED<<1) + (GREEN<<7) + GREEN + (BLUE<<4) + (BLUE<<3) + BLUE)>>8))<<8;

    //------Draw bounding box to VGA when SW[0] is down --
    always @(~SW[0] or X or Y or RED or GREEN or BLUE) begin
        if ( ~SW[0] && (((Y == 127 || Y == 353) && (207 <= X && X <= 433)) || ((X == 207 || X == 433) && (127 <= Y && Y <= 353))) ) begin
            BOUND_RED = 8'h00;
            BOUND_GREEN = 8'hFF;
            BOUND_BLUE = 8'hFF;
        end
        else begin
            BOUND_RED = RED;
            BOUND_GREEN = GREEN;
            BOUND_BLUE = BLUE;
        end
    end

    //------Write RGB or Y channel values of bounding box top left corner to HEX every second --
    // Write RGB when SW[1] is up, else write integer part of Y channel
    COLOR2HEX	c2h (
        .CLK			( VGA_CLK ),
        .selRGB         ( SW[1] ),
        .X  			( X ),
        .Y	    		( Y ),
        .iR				( BOUND_RED ),
        .iG				( BOUND_GREEN ),
        .iB				( BOUND_BLUE ),
        .HEX			( {HEX5, HEX4, HEX3, HEX2, HEX1, HEX0} )
    );

    //------AOTO FOCUS ENABLE  --
    AUTO_FOCUS_ON  vd(
        .CLK_50      ( CLOCK2_50 ),
        .I2C_RELEASE ( I2C_RELEASE ),
        .AUTO_FOC    ( AUTO_FOC )
    );

    //------AOTO FOCUS ADJ  --
    FOCUS_ADJ adl(
        .CLK_50        ( CLOCK2_50 ),
        .RESET_N       ( I2C_RELEASE ),
        .RESET_SUB_N   ( I2C_RELEASE ),
        .AUTO_FOC      ( KEY[3] & AUTO_FOC ),
        .SW_Y          ( 0 ),
        .SW_H_FREQ     ( 0 ),
        .SW_FUC_LINE   ( SW[3] ),
        .SW_FUC_ALL_CEN( SW[3] ),
        .VIDEO_HS      ( VGA_HS ),
        .VIDEO_VS      ( VGA_VS ),
        .VIDEO_CLK     ( VGA_CLK ),
        .VIDEO_DE      (READ_Request),
        .iR            ( R_AUTO ),
        .iG            ( G_AUTO ),
        .iB            ( B_AUTO ),
        .oR            ( VGA_R ),
        .oG            ( VGA_G ),
        .oB            ( VGA_B ),

        .READY         ( READY ),
        .SCL           ( CAMERA_I2C_SCL_AF ),
        .SDA           ( CAMERA_I2C_SDA )
    );

    //------VGA Controller  --
    VGA_Controller		u1	(
        //	Host Side
        .oRequest( READ_Request ),
        .iRed    ( BOUND_RED    ),
        .iGreen  ( BOUND_GREEN  ),
        .iBlue   ( BOUND_BLUE   ),

        //	VGA Side
        .oVGA_R  ( R_AUTO[7:0] ),
        .oVGA_G  ( G_AUTO[7:0] ),
        .oVGA_B  ( B_AUTO[7:0] ),
        .oVGA_H_SYNC( VGA_HS ),
        .oVGA_V_SYNC( VGA_VS ),
        .oVGA_SYNC  ( VGA_SYNC_N ),
        .oVGA_BLANK ( VGA_BLANK_N ),

        //	Control Signal
        .iCLK       ( VGA_CLK ),
        .iRST_N     ( DLY_RST_2 ),
        .H_Cont     ( VGA_H_CNT ),
        .V_Cont     ( VGA_V_CNT )
    );

    //------VS FREQUENCY TEST = 60HZ --
    // FpsMonitor uFps(
    //     .clk50    ( CLOCK2_50 ),
    //     .vs       ( LUT_MIPI_PIXEL_VS ),
    //     .fps      (),
    //     .hex_fps_h( HEX1 ),
    //     .hex_fps_l( HEX0 )
    // );

    //--LED DISPLAY--
    CLOCKMEM  ck1 ( .CLK(VGA_CLK),          .CLK_FREQ(25000000), .CK_1HZ(D8M_CK_HZ)   );//25MHZ
    CLOCKMEM  ck2 ( .CLK(MIPI_REFCLK),      .CLK_FREQ(20000000), .CK_1HZ(D8M_CK_HZ2)  );//20MHZ
    CLOCKMEM  ck3 ( .CLK(MIPI_PIXEL_CLK_),  .CLK_FREQ(25000000), .CK_1HZ(D8M_CK_HZ3)  );//25MHZ

    assign LEDR = { D8M_CK_HZ, D8M_CK_HZ2,D8M_CK_HZ3, 5'h0,CAMERA_MIPI_RELAESE, MIPI_BRIDGE_RELEASE };

endmodule
