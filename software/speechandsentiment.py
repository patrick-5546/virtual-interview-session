# -*- coding: utf-8 -*-
"""SpeechandSentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jN8eN-Cvy5Yic2hUZlQvPmGh_yrUoZQA
"""

!pip install --upgrade google-cloud-speech

!pip install --upgrade google-cloud-language

from google.colab import drive
drive.mount("/content/drive")

import os
import io
from google.cloud import speech_v1p1beta1 as speech
from google.cloud import language_v1
from IPython.display import Audio

# environment variable using os module
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/content/drive/MyDrive/Cpen391/sturdy-method-342301-ad3611d45d14.json'

os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/content/drive/MyDrive/SentimentAnalysis/sentiment-ananlysis-342309-6c44e995fedb.json'

client = speech.SpeechClient()

Audio('/content/drive/MyDrive/Cpen391/english10.mp3')

with open('/content/drive/MyDrive/Cpen391/english10.mp3', 'rb') as audio_file:
  byte_data = audio_file.read()
  audio = speech.RecognitionAudio(content=byte_data)

config = speech.RecognitionConfig(encoding=speech.RecognitionConfig.AudioEncoding.MP3, sample_rate_hertz=16000, language_code='en-US')

operation = client.long_running_recognize(config=config, audio=audio)

print("Waiting for operation ...")
response = operation.result(timeout=90)

for result in response.results:
  print(u'Transcript: {}'.format(result.alternatives[0].transcript))
  print('Confidence: {}'.format(result.alternatives[0].confidence))

text = 'Transcript: {}'.format(result.alternatives[0].transcript)

print(text)

client = language_v1.LanguageServiceClient()

text = 'Transcript: {}'.format(result.alternatives[0].transcript)
document = language_v1.Document(content=text, type_= language_v1.Document.Type.PLAIN_TEXT)

sentiment = client.analyze_sentiment(request={"document": document})

score = sentiment.document_sentiment.score
magnitude = sentiment.document_sentiment.magnitude
for index, sentence in enumerate(sentiment.sentences):
  sentence_sentiment = sentence.sentiment.score
  print("Sentence {} has a sentiment score of {}".format(index, sentence_sentiment))
print("Overall Sentiment: score of {} with magnitude of {}".format(score, magnitude))